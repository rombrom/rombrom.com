#!/usr/bin/env bash

set -e

args=""
cmd=""

opt_delimiters="()"
opt_output_dir="dist"

RE_BLOCK_START="[[:blank:]]*\\${opt_delimiters:0:1}(#block)[[:blank:]]*(.+)[[:blank:]]*\\${opt_delimiters:1:1}"
RE_BLOCK_END="[[:blank:]]*\\${opt_delimiters:0:1}(\/block)[[:blank:]]*\\${opt_delimiters:1:1}"
RE_EXTEND="[[:blank:]]*\\${opt_delimiters:0:1}(#extend|<)[[:blank:]]*(.+)[[:blank:]]*\\${opt_delimiters:1:1}"
RE_INCLUDE="[[:blank:]]*\\${opt_delimiters:0:1}(#include|>)[[:blank:]]*(.+)[[:blank:]]*\\${opt_delimiters:1:1}"

# log error and exit
# @param string
# @return string
# @exit
err() {
  printf "%s\n" "$@" >&2
  exit 1
}

# escape special characters so the string can safely be used
# in a regex
# @param string
# @return string
esc_re() {
  # NOTE: I haven't been able to port this to bash substitution
  printf '%s' "$1" | sed "s/[]})\/.?^|$+*({[]/\\\&/g"
}

# escapes potential backreference in a string when used as
# replacement in sed's s/ or awk's gsub()
# @param string
# @return string
esc_ref() {
  printf '%s' "${1//[&]/\\&}"
}

# parses a string for shmatic expressions and returns an evaluated string
# @param string
# @param directory
# @return string
parse() {
  local output="$1"
  local context="$2"

  [[ -d "$context" ]] && cd "$context"

  output="$(parse_includes "$output" "$context")"

  printf '%s\n' "$output"
}

parse_block() {
  local output="$1"

  output="$(printf %s "$output" | sed -E "/$RE_BLOCK_START/,/$RE_BLOCK_END/ {
  }")"
}

# parses a string for include expressions and evaluates them.
# recursively calls parse() to check whether we need to continue
# evaluation for other expressions
# @param string
# @return string
parse_includes() {
  local output="$1"

  # create a list of includeRecords, consisting of
  # [file]:[expression]
  # 1. grep for our pattern and only list the result (-o)
  # 2. remove the expression syntax and keep the file path
  # 3. make sure we have no duplicates
  local includes; includes="$(printf %s "$output" \
    | grep -oE "$RE_INCLUDE" \
    | sed -E "s/$RE_INCLUDE/\2:&/" \
    | uniq)"

  # if there are no includes, bail
  if [[ -z "$includes" ]]; then
    printf '%s' "$output"
    return
  fi

  # includes is a list of includeRecords, consisting of:
  # [path]:[expression]
  # NOTE: for...in does not work here which as to do with I _think_ IFS in
  # combination with how the $includes are formatted?
  while read -r includeRecord; do
    local path; path="${includeRecord%:*}"
    local exp_re; exp_re="$(esc_re "${includeRecord#*:}")"
    local whitespace="$(printf %s "${includeRecord#*:}" \
      | grep -oE '^[[:blank:]]+')"

    # loop trough possible file glob where a few things should happen
    # 1. before parsing, evaluate variables
    # 2. prepend white-space
    local content="";
    for file in $path; do
      content+="$(sed "s/^/$whitespace/" "$file")"
    done
    content="$(esc_ref "$content")"

    # Recursively parse includes first in $content BEFORE
    # we actually replace expressions with their contents.
    # This way the call stack resolves in the right order.
    content="$(parse "$content" "$(dirname "$path")")"

    # replace any include expressions with the content of the partial.
    # NOTE: This was a wild ride. sed, being heavily line based made it
    # difficult to work with ranges. awk on MacOS (apparently) didn't want
    # to play nice with variables passed with awk -v.  Thank you, fprimex
    # https://github.com/hashicorp-community/tf-helper/issues/1#issuecomment-490656096
    output="$(awk "BEGIN {
        content=ARGV[1]; delete ARGV[1];
        output=ARGV[2]; delete ARGV[2];
        gsub(/$exp_re/, content, output);
        print output
      }" "$content" "$output" \
    )"

  # TODO: the <<< syntax does not work in sh. It does in bash,
  # zsh and probably others. This feels like coding for IE6 again.
  done <<< "$includes"

  printf '%s\n' "$output"
}

# parse files
# @param any?
# TODO: this should write the files to the output directory,
# taking into account the creation of subdirectories where
# necessary
parse_files() {
  local cwd="$PWD";

  for path do
    local realpath="$path"

    [[ ! "${realpath:0:1}" = '/' ]] && realpath="$cwd/$realpath"
    [[ ! -f "$realpath" ]] && err "File not found: $realpath"

    parse "$(<"$realpath")" "$(dirname "$realpath")"
  done
}

# loop through arguments and options
while [[ "$#" -ne 0 ]]; do
  case "$1" in
    --debug)
      PS4='$LINENO: '
      set -x
      ;;
    *)
      args+="$1 "
      ;;
  esac
  shift
done

# kick everything off
parse_files $args
